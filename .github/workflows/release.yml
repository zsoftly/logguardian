name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  GO_VERSION: '1.24'

jobs:
  # Create GitHub release with artifacts
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: go test -v ./...

      - name: Build Lambda function
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="-s -w -X main.version=${{ steps.get_tag.outputs.tag_name }}" \
            -o build/bootstrap \
            ./cmd/lambda

      - name: Create deployment packages
        run: |
          mkdir -p dist
          
          # Create Lambda deployment package
          cd build && zip -r ../dist/logguardian-compliance-${{ steps.get_tag.outputs.tag_name }}.zip bootstrap
          cd ..
          
          # Create source archive
          git archive --format=zip --prefix=logguardian-${{ steps.get_tag.outputs.tag_name }}/ \
            ${{ steps.get_tag.outputs.tag_name }} > dist/logguardian-source-${{ steps.get_tag.outputs.tag_name }}.zip

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_tag.outputs.tag_name }}^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            echo "Previous tag: $PREV_TAG"
            echo "## Changes in ${{ steps.get_tag.outputs.tag_name }}" > changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ steps.get_tag.outputs.tag_name }} >> changelog.md
          else
            echo "## Initial Release ${{ steps.get_tag.outputs.tag_name }}" > changelog.md
            echo "" >> changelog.md
            echo "- Initial release of LogGuardian Go Lambda function" >> changelog.md
          fi
          
          # Set output for release notes using file method
          {
            echo 'changelog<<CHANGELOG_EOF'
            cat changelog.md
            echo 'CHANGELOG_EOF'
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          release_name: LogGuardian ${{ steps.get_tag.outputs.tag_name }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### AWS Lambda Deployment
            ```bash
            # Download the deployment package
            curl -L -o logguardian-compliance.zip \
              https://github.com/${{ github.repository }}/releases/download/${{ steps.get_tag.outputs.tag_name }}/logguardian-compliance-${{ steps.get_tag.outputs.tag_name }}.zip
            
            # Deploy with AWS CLI
            aws lambda update-function-code \
              --function-name logguardian-compliance \
              --zip-file fileb://logguardian-compliance.zip
            ```
            
            ## Checksums
            ```
            $(cat dist/checksums.txt)
            ```
          draft: false
          prerelease: ${{ contains(steps.get_tag.outputs.tag_name, 'alpha') || contains(steps.get_tag.outputs.tag_name, 'beta') || contains(steps.get_tag.outputs.tag_name, 'rc') }}

      - name: Upload Lambda deployment package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/logguardian-compliance-${{ steps.get_tag.outputs.tag_name }}.zip
          asset_name: logguardian-compliance-${{ steps.get_tag.outputs.tag_name }}.zip
          asset_content_type: application/zip

      - name: Upload source archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/logguardian-source-${{ steps.get_tag.outputs.tag_name }}.zip
          asset_name: logguardian-source-${{ steps.get_tag.outputs.tag_name }}.zip
          asset_content_type: application/zip

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain