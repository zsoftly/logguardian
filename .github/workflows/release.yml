name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

env:
  GO_VERSION: '1.24'

jobs:
  build-lambda:
    name: Build Lambda Function
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build Lambda binary
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="-s -w -X main.version=${{ github.ref_name }}" \
            -o build/bootstrap \
            ./cmd/lambda

      - name: Create Lambda deployment package
        run: |
          mkdir -p dist
          cd build && zip -r ../dist/logguardian-compliance.zip bootstrap
          cd ..
          # Also create a versioned copy
          cp dist/logguardian-compliance.zip dist/logguardian-compliance-${{ github.ref_name }}.zip

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: |
            dist/logguardian-compliance.zip
            dist/logguardian-compliance-${{ github.ref_name }}.zip

  build-container:
    name: Build Container Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build container binary
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="-s -w -X main.version=${{ github.ref_name }}" \
            -o build/logguardian-container \
            ./cmd/container
          
          # Create versioned copy
          cp build/logguardian-container build/logguardian-container-${{ github.ref_name }}

      - name: Create tarball
        run: |
          tar -czf build/logguardian-container-${{ github.ref_name }}.tar.gz \
            -C build logguardian-container

      - name: Upload container artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-binary
          path: |
            build/logguardian-container
            build/logguardian-container-${{ github.ref_name }}
            build/logguardian-container-${{ github.ref_name }}.tar.gz

  publish-docker:
    name: Publish Docker Image
    needs: build-container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT_SHA=${{ github.sha }}

      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build_and_push.outputs.digest }}
          push-to-registry: true

  create-release:
    name: Create GitHub Release
    needs: [build-lambda, build-container]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: ./artifacts

      - name: Download container artifact
        uses: actions/download-artifact@v4
        with:
          name: container-binary
          path: ./artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Prepare release body
        run: |
          # Use scripts to handle all release notes preparation
          # This avoids inline code and delimiter issues
          NOTES_BASE64=$(./scripts/02_encode_release_notes.sh "${{ github.ref_name }}" "${{ github.repository }}")
          ./scripts/03_prepare_release_body.sh \
            "${{ github.ref_name }}" \
            "${{ github.repository }}" \
            "$NOTES_BASE64" \
            "release_body.md"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: LogGuardian ${{ github.ref_name }}
          body_path: release_body.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          files: |
            artifacts/logguardian-compliance.zip
            artifacts/logguardian-compliance-${{ github.ref_name }}.zip
            artifacts/logguardian-container
            artifacts/logguardian-container-${{ github.ref_name }}
            artifacts/logguardian-container-${{ github.ref_name }}.tar.gz
            artifacts/checksums.txt

      - name: Generate summary
        run: |
          echo "## ðŸŽ‰ Release Published: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Docker Image" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“„ Release Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Lambda Package: logguardian-compliance-${{ github.ref_name }}.zip" >> $GITHUB_STEP_SUMMARY
          echo "- Container Binary: logguardian-container-${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”— Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Registry](https://github.com/${{ github.repository }}/pkgs/container/logguardian)" >> $GITHUB_STEP_SUMMARY

