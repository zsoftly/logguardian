name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

env:
  GO_VERSION: '1.24'

jobs:
  build-lambda:
    name: Build Lambda Function
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build Lambda binary
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="-s -w -X main.version=${{ github.ref_name }}" \
            -o build/bootstrap \
            ./cmd/lambda

      - name: Create Lambda deployment package
        run: |
          mkdir -p dist
          cd build && zip -r ../dist/logguardian-compliance.zip bootstrap
          cd ..
          # Also create a versioned copy
          cp dist/logguardian-compliance.zip dist/logguardian-compliance-${{ github.ref_name }}.zip

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: |
            dist/logguardian-compliance.zip
            dist/logguardian-compliance-${{ github.ref_name }}.zip

  build-container:
    name: Build Container Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build container binary
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="-s -w -X main.version=${{ github.ref_name }}" \
            -o build/logguardian-container \
            ./cmd/container
          
          # Create versioned copy
          cp build/logguardian-container build/logguardian-container-${{ github.ref_name }}

      - name: Create tarball
        run: |
          tar -czf build/logguardian-container-${{ github.ref_name }}.tar.gz \
            -C build logguardian-container

      - name: Upload container artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-binary
          path: |
            build/logguardian-container
            build/logguardian-container-${{ github.ref_name }}
            build/logguardian-container-${{ github.ref_name }}.tar.gz

  publish-docker:
    name: Publish Docker Image
    needs: build-container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT_SHA=${{ github.sha }}

      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build_and_push.outputs.digest }}
          push-to-registry: true

  create-release:
    name: Create GitHub Release
    needs: [build-lambda, build-container]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: ./artifacts

      - name: Download container artifact
        uses: actions/download-artifact@v4
        with:
          name: container-binary
          path: ./artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Read release notes
        id: release_notes
        run: |
          if [ -f RELEASE_NOTES.md ]; then
            echo "Found RELEASE_NOTES.md"
            # Use a unique delimiter that won't appear in release notes
            DELIMITER="RELEASE_NOTES_END_MARKER_$(date +%s)"
            {
              echo "notes<<$DELIMITER"
              cat RELEASE_NOTES.md
              echo "$DELIMITER"
            } >> $GITHUB_OUTPUT
          else
            echo "No RELEASE_NOTES.md found, generating from git log"
            
            # Get previous tag
            PREV_TAG=$(git describe --tags --abbrev=0 ${{ github.ref_name }}^ 2>/dev/null || echo "")
            
            # Use a unique delimiter that won't appear in release notes
            DELIMITER="RELEASE_NOTES_END_MARKER_$(date +%s)"
            {
              echo "notes<<$DELIMITER"
              echo "# Release ${{ github.ref_name }}"
              echo ""
              echo "Release Date: $(date +%Y-%m-%d)"
              echo ""
              
              if [ -n "$PREV_TAG" ]; then
                echo "## Changes since $PREV_TAG"
                echo ""
                
                # Features
                echo "### 🚀 Features"
                git log $PREV_TAG..${{ github.ref_name }} --grep="^feat" --pretty=format:"- %s (%h)" || echo "- No new features"
                echo ""
                echo ""
                
                # Bug fixes
                echo "### 🐛 Bug Fixes"
                git log $PREV_TAG..${{ github.ref_name }} --grep="^fix" --pretty=format:"- %s (%h)" || echo "- No bug fixes"
                echo ""
                echo ""
                
                # Other changes
                echo "### 🔧 Other Changes"
                git log $PREV_TAG..${{ github.ref_name }} --grep="^chore\|^docs\|^test\|^refactor" --pretty=format:"- %s (%h)" || echo "- No other changes"
                echo ""
              else
                echo "Initial release of LogGuardian - AWS CloudWatch Log Compliance Automation"
              fi
              
              echo ""
              echo "## Installation"
              echo ""
              echo "### Docker"
              echo '```bash'
              echo "docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
              echo '```'
              echo ""
              echo "### Lambda"
              echo "Download the Lambda deployment package from the release artifacts below."
              echo ""
              echo "### Container Binary"
              echo "Download the standalone container binary from the release artifacts below."
              echo "$DELIMITER"
            } >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: LogGuardian ${{ github.ref_name }}
          body: |
            ${{ steps.release_notes.outputs.notes }}
            
            ## Checksums
            ```
            $(cat artifacts/checksums.txt)
            ```
            
            ## Quick Start
            
            ### Docker (Recommended)
            ```bash
            # Pull and run the container
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            docker run --rm ghcr.io/${{ github.repository }}:${{ github.ref_name }} --help
            ```
            
            ### AWS Lambda
            ```bash
            # Download and deploy
            curl -L -o logguardian-compliance.zip \
              https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/logguardian-compliance-${{ github.ref_name }}.zip
            
            aws lambda update-function-code \
              --function-name logguardian-compliance \
              --zip-file fileb://logguardian-compliance.zip
            ```
            
            See [Documentation](https://github.com/${{ github.repository }}#documentation--support) for detailed usage instructions.
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          files: |
            artifacts/logguardian-compliance.zip
            artifacts/logguardian-compliance-${{ github.ref_name }}.zip
            artifacts/logguardian-container
            artifacts/logguardian-container-${{ github.ref_name }}
            artifacts/logguardian-container-${{ github.ref_name }}.tar.gz
            artifacts/checksums.txt

      - name: Generate summary
        run: |
          echo "## 🎉 Release Published: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Docker Image" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📄 Release Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Lambda Package: logguardian-compliance-${{ github.ref_name }}.zip" >> $GITHUB_STEP_SUMMARY
          echo "- Container Binary: logguardian-container-${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Registry](https://github.com/${{ github.repository }}/pkgs/container/logguardian)" >> $GITHUB_STEP_SUMMARY

