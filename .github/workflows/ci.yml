name: CI

on:
  push:
    branches: [ main, 'feature/*', 'feat/*', 'issue/*', 'release/*' ]
  pull_request:
    branches: [ main, 'feature/*', 'feat/*', 'issue/*', 'release/*' ]

env:
  GO_VERSION: '1.24'

jobs:
  # Lint and code quality checks
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Check Go modules
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  # Security scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run GoSec security scan
        uses: securego/gosec@master
        with:
          args: './...'
        continue-on-error: true

      - name: Run Go vulnerability check
        run: |
          echo "🔍 Running Go vulnerability scan..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
        continue-on-error: true

      - name: Check for insecure dependencies
        run: |
          echo "🔍 Checking Go module security..."
          go list -json -deps ./... | grep -E '"Module":|"Version":|"Path":' || true
          echo "📊 Module security check completed"

  # Test on AWS Lambda runtime environment only
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests with Lambda environment
        env:
          GOOS: linux
          GOARCH: amd64
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # Build Lambda function
  build:
    name: Build AWS Lambda Function
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build for AWS Lambda (Amazon Linux 2023)
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="-s -w" \
            -o build/bootstrap \
            ./cmd/lambda

      - name: Create Lambda deployment package
        run: |
          mkdir -p dist
          cd build && zip -r ../dist/logguardian-compliance.zip bootstrap

      - name: Upload Lambda deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-deployment-package
          path: dist/logguardian-compliance.zip
          retention-days: 30

      - name: Check Lambda binary size
        run: |
          echo "## AWS Lambda Binary Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| bootstrap | $(ls -lh build/bootstrap | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
          echo "| deployment zip | $(ls -lh dist/logguardian-compliance.zip | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY

  # Build and test Docker container
  docker-build:
    name: Build and Test Docker Container
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t logguardian:ci-${{ github.sha }} .
          echo "✅ Docker image built successfully"

      - name: Verify Docker image
        run: |
          echo "## Docker Image Report" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tag | logguardian:ci-${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Size | $(docker images logguardian:ci-${{ github.sha }} --format '{{.Size}}') |" >> $GITHUB_STEP_SUMMARY
          echo "| Created | $(docker images logguardian:ci-${{ github.sha }} --format '{{.CreatedAt}}') |" >> $GITHUB_STEP_SUMMARY

      - name: Test container help command
        run: |
          docker run --rm logguardian:ci-${{ github.sha }} --help
          echo "✅ Container help command executed successfully"

      - name: Test container with dry-run (no AWS credentials)
        run: |
          # This will fail due to no credentials, but we're testing the container starts properly
          docker run --rm \
            -e DRY_RUN=true \
            logguardian:ci-${{ github.sha }} \
            --config-rule test-rule \
            --region us-east-1 \
            --dry-run \
            || EXIT_CODE=$?
          
          # Exit code 1 is expected (no credentials), anything else is a real error
          if [ "${EXIT_CODE:-1}" -ne 1 ]; then
            echo "❌ Unexpected exit code: ${EXIT_CODE:-1}"
            exit 1
          else
            echo "✅ Container executed as expected (failed due to no credentials)"
          fi

      - name: Test container version output
        run: |
          docker run --rm \
            -e APP_VERSION=ci-test-${{ github.sha }} \
            logguardian:ci-${{ github.sha }} \
            --help 2>&1 | grep -q "LogGuardian" && echo "✅ Container version check passed"

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'logguardian:ci-${{ github.sha }}'
          format: 'table'
          exit-code: '0'  # Don't fail the build on vulnerabilities (for now)
          severity: 'CRITICAL,HIGH'

  # Build container binary separately for artifact upload
  build-container:
    name: Build Container Binary
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build container binary
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="-s -w -X main.version=${{ github.sha }}" \
            -o build/logguardian-container \
            ./cmd/container

      - name: Upload container binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-binary
          path: build/logguardian-container
          retention-days: 30

      - name: Check container binary size
        run: |
          echo "## Container Binary Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| logguardian-container | $(ls -lh build/logguardian-container | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY

  # Benchmark and performance testing for Lambda
  benchmark:
    name: AWS Lambda Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Lambda performance benchmarks
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          go test -bench=. -benchmem -run=^$ ./... > benchmark.txt
          echo "## AWS Lambda Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat benchmark.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY