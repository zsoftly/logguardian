AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'LogGuardian - Automated CloudWatch Log Groups Compliance (AWS Marketplace)'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: LogGuardian
    Description: 'Enterprise-grade automation for CloudWatch log group encryption, retention, and compliance monitoring'
    Author: 'ZSoftly Technologies Inc'
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['cloudwatch', 'compliance', 'security', 'kms', 'logs']
    HomePageUrl: https://github.com/zsoftly/logguardian
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/zsoftly/logguardian

Parameters:
  Environment:
    Type: String
    Default: prod
    Description: Deployment environment
    AllowedValues: [dev, staging, prod, sandbox]
    
  KMSKeyAlias:
    Type: String
    Default: alias/logguardian-logs
    Description: KMS key alias for encrypting CloudWatch log groups
    AllowedPattern: "^alias/[a-zA-Z0-9:/_-]+$"

  DefaultRetentionDays:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 3653
    Description: Default retention period for log groups in days (minimum 1 day for Config rules)

  ScheduleExpression:
    Type: String
    Default: "cron(0 2 ? * SAT *)"
    Description: How often to run compliance checks - encryption runs Saturdays, retention runs Sundays (staggered)
    AllowedPattern: "^(rate\\(.*\\)|cron\\(.*\\))$"

  EnableStaggeredScheduling:
    Type: String
    Default: "true"
    Description: Enable staggered scheduling to avoid simultaneous execution
    AllowedValues: ["true", "false"]

  # S3 Lifecycle Configuration Parameters  
  S3ExpirationDays:
    Type: Number
    Default: 14
    MinValue: 1
    MaxValue: 3653
    Description: Days after which Config data is permanently deleted (default 14 days for testing, increase for compliance)

  EnableS3LifecycleRules:
    Type: String
    Default: "true"
    Description: Enable S3 lifecycle rules for cost optimization
    AllowedValues: ["true", "false"]

  CreateMonitoringDashboard:
    Type: String
    Default: "false"
    Description: Create CloudWatch dashboard for monitoring (recommended for production only)
    AllowedValues: ["true", "false"]

  LambdaMemorySize:
    Type: Number
    Default: 256
    MinValue: 128
    MaxValue: 3008
    Description: Memory allocation for Lambda function (MB)

  LambdaTimeout:
    Type: Number
    Default: 900
    MinValue: 1
    MaxValue: 900
    Description: Lambda function timeout in seconds

Conditions:
  IsStaggeredScheduling: !Equals [!Ref EnableStaggeredScheduling, "true"]
  IsS3LifecycleEnabled: !Equals [!Ref EnableS3LifecycleRules, "true"]
  CreateDashboard: !Equals [!Ref CreateMonitoringDashboard, "true"]
  IsProductionEnvironment: !Or
    - !Equals [!Ref Environment, "prod"]
    - !Equals [!Ref Environment, "production"]
  IsDevelopmentEnvironment: !Or
    - !Equals [!Ref Environment, "dev"]
    - !Equals [!Ref Environment, "sandbox"]
    - !Equals [!Ref Environment, "staging"]
  IsHourlySchedule: !Or
    - !Equals [!Ref ScheduleExpression, "rate(1 hour)"]
    - !Equals [!Ref ScheduleExpression, "rate(2 hours)"]
    - !Equals [!Ref ScheduleExpression, "rate(3 hours)"]
    - !Equals [!Ref ScheduleExpression, "rate(4 hours)"]
    - !Equals [!Ref ScheduleExpression, "rate(6 hours)"]
    - !Equals [!Ref ScheduleExpression, "rate(8 hours)"]
    - !Equals [!Ref ScheduleExpression, "rate(12 hours)"]
  IsDailySchedule: !Or
    - !Equals [!Ref ScheduleExpression, "rate(24 hours)"]
    - !Equals [!Ref ScheduleExpression, "rate(1 day)"]
    - !Equals [!Ref ScheduleExpression, "cron(0 0 * * ? *)"]
  IsWeeklySchedule: !Or
    - !Equals [!Ref ScheduleExpression, "rate(7 days)"]
    - !Equals [!Ref ScheduleExpression, "cron(0 2 ? * SAT *)"]
    - !Equals [!Ref ScheduleExpression, "cron(0 0 ? * MON *)"]

Globals:
  Function:
    Runtime: provided.al2023
    Architectures: [x86_64]
    Timeout: !Ref LambdaTimeout
    MemorySize: !Ref LambdaMemorySize
    Environment:
      Variables:
        KMS_KEY_ALIAS: !Ref KMSKeyAlias
        DEFAULT_RETENTION_DAYS: !Ref DefaultRetentionDays
        ENVIRONMENT: !Ref Environment
        LOG_LEVEL: INFO
        DRY_RUN: 'false'
        BATCH_LIMIT: '100'
    Tags:
      Environment: !Ref Environment
      Application: LogGuardian

Resources:
  # KMS Key for Log Group Encryption
  LogGuardianKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "LogGuardian KMS key for ${Environment} environment"
      KeyPolicy:
        Statement:
          - Sid: Enable root permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
            Condition:
              ArnEquals:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      EnableKeyRotation: true

  LogGuardianKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Ref KMSKeyAlias
      TargetKeyId: !Ref LogGuardianKMSKey

  # SAM Lambda Function
  LogGuardianFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "logguardian-compliance-${Environment}"
      CodeUri: build/
      Handler: bootstrap
      Description: "LogGuardian compliance automation for CloudWatch log groups"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - config:GetComplianceDetailsByConfigRule
                - config:GetComplianceDetailsByResource
                - config:DescribeConfigRules
                - config:DescribeComplianceByConfigRule
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:AssociateKmsKey
                - logs:PutRetentionPolicy
                - logs:DescribeLogGroups
              Resource: "*"
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
                - kms:GetKeyPolicy
                - kms:ListAliases
              Resource: "*"
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"
              Condition:
                StringEquals:
                  "cloudwatch:namespace": "LogGuardian"
      Events:
        EncryptionSchedule:
          Type: Schedule
          Properties:
            Name: !Sub "logguardian-encryption-schedule-${Environment}"
            Description: "Scheduled trigger for LogGuardian encryption compliance checks (runs first)"
            Schedule: !Ref ScheduleExpression
            Input: !Sub |
              {
                "type": "config-rule-evaluation",
                "configRuleName": "${EncryptionConfigRule}",
                "region": "${AWS::Region}",
                "account": "${AWS::AccountId}",
                "environment": "${Environment}",
                "batchSize": 20
              }
        RetentionSchedule:
          Type: Schedule
          Properties:
            Name: !Sub "logguardian-retention-schedule-${Environment}"
            Description: "Scheduled trigger for LogGuardian retention compliance checks (runs Sundays, staggered from encryption)"
            Schedule: !If 
              - IsStaggeredScheduling
              - !If 
                - IsHourlySchedule
                - "cron(30 * * * ? *)"  # 30 minutes past every hour
                - !If 
                  - IsDailySchedule  
                  - "cron(30 0 * * ? *)"  # 12:30 AM daily
                  - !If
                    - IsWeeklySchedule
                    - "cron(0 2 ? * SUN *)"  # 2:00 AM Sundays (encryption runs Saturdays)
                    - "cron(30 0 1 * ? *)"  # 12:30 AM first day of month
              - !Ref ScheduleExpression
            Input: !Sub |
              {
                "type": "config-rule-evaluation",
                "configRuleName": "${RetentionConfigRule}",
                "region": "${AWS::Region}",
                "account": "${AWS::AccountId}",
                "environment": "${Environment}",
                "batchSize": 20
              }

  # Config Service Role
  ConfigServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWS_ConfigRole

  # Config Bucket
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'logguardian-config-${Environment}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        !If
          - IsS3LifecycleEnabled
          - Rules:
              - Id: ConfigDataExpiration
                Status: Enabled
                ExpirationInDays: !Ref S3ExpirationDays
                NoncurrentVersionExpirationInDays: 7
          - !Ref AWS::NoValue
      VersioningConfiguration:
        Status: !If [IsS3LifecycleEnabled, Enabled, Suspended]

  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt ConfigBucket.Arn
            Condition:
              StringEquals:
                'AWS:SourceAccount': !Ref 'AWS::AccountId'
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:ListBucket
            Resource: !GetAtt ConfigBucket.Arn
            Condition:
              StringEquals:
                'AWS:SourceAccount': !Ref 'AWS::AccountId'
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${ConfigBucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
                'AWS:SourceAccount': !Ref 'AWS::AccountId'

  ConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: !Sub 'LogGuardian-Recorder-${Environment}'
      RoleARN: !GetAtt ConfigServiceRole.Arn
      RecordingGroup:
        AllSupported: false
        IncludeGlobalResourceTypes: false
        ResourceTypes:
          - AWS::Logs::LogGroup

  DeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      Name: !Sub 'LogGuardian-DeliveryChannel-${Environment}'
      S3BucketName: !Ref ConfigBucket

  # Config Rules
  EncryptionConfigRule:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: !Sub "logguardian-encryption-${Environment}"
      Description: "Checks if CloudWatch log groups are encrypted with KMS"
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDWATCH_LOG_GROUP_ENCRYPTED
      Scope:
        ComplianceResourceTypes:
          - AWS::Logs::LogGroup
      MaximumExecutionFrequency: TwentyFour_Hours

  RetentionConfigRule:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: !Sub "logguardian-retention-${Environment}"
      Description: !Sub "Checks if CloudWatch log groups have retention policy set to at least ${DefaultRetentionDays} days"
      Source:
        Owner: AWS
        SourceIdentifier: CW_LOGGROUP_RETENTION_PERIOD_CHECK
      InputParameters: !Sub |
        {
          "MinRetentionTime": "${DefaultRetentionDays}"
        }
      Scope:
        ComplianceResourceTypes:
          - AWS::Logs::LogGroup
      MaximumExecutionFrequency: TwentyFour_Hours

  # CloudWatch Dashboard (Optional - Disabled by Default)
  ComplianceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateDashboard
    Properties:
      DashboardName: !Sub "LogGuardian-${Environment}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LogGuardianFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Invocations", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "LogGuardian", "LogGroupsProcessed", "Environment", "${Environment}" ],
                  [ ".", "LogGroupsRemediated", ".", "." ],
                  [ ".", "RemediationErrors", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Compliance Metrics"
              }
            }
          ]
        }

Outputs:
  LogGuardianFunctionArn:
    Description: ARN of the LogGuardian Lambda function
    Value: !GetAtt LogGuardianFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FunctionArn"

  KMSKeyArn:
    Description: ARN of the KMS key used for log group encryption
    Value: !GetAtt LogGuardianKMSKey.Arn
    Export:
      Name: !Sub "${AWS::StackName}-KMSKeyArn"

  DashboardURL:
    Condition: CreateDashboard
    Description: URL to the CloudWatch dashboard (only created if monitoring dashboard is enabled)
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=LogGuardian-${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardURL"

  ApplicationId:
    Description: SAM Application ID for AWS Serverless Application Repository
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationId"

  ConfigBucketName:
    Description: Name of the S3 bucket storing AWS Config data
    Value: !Ref ConfigBucket
    Export:
      Name: !Sub "${AWS::StackName}-ConfigBucket"

  S3LifecycleSettings:
    Description: S3 lifecycle configuration for cost optimization
    Value: !Sub "Delete after ${S3ExpirationDays} days (lifecycle rules ${EnableS3LifecycleRules})"
    Export:
      Name: !Sub "${AWS::StackName}-S3Lifecycle"
