AWSTemplateFormatVersion: '2010-09-09'
Description: 'LogGuardian - StackSets Template for Multi-Account Deployment'

Parameters:
  Environment:
    Type: String
    Default: prod
    Description: Deployment environment (e.g. dev, staging, prod, test, qa, etc)
    
  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment package (accessible across accounts)
    
  LambdaCodeKey:
    Type: String
    Default: logguardian-compliance.zip
    Description: S3 key for Lambda deployment package
    
  KMSKeyAlias:
    Type: String
    Default: alias/logguardian-logs
    Description: KMS key alias for log group encryption (will be created per account)
    
  DefaultRetentionDays:
    Type: Number
    Default: 365
    Description: Default retention period for log groups in days
    
  ScheduleExpression:
    Type: String
    Default: "rate(24 hours)"
    Description: How often to run compliance checks
    
  OrganizationId:
    Type: String
    Description: AWS Organization ID for cross-account bucket access
    Default: ""

Resources:
  # KMS Key for this account
  LogGuardianKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "LogGuardian KMS key for CloudWatch log group encryption - ${Environment}"
      KeyPolicy:
        Statement:
          - Sid: Enable root permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow CloudWatch Logs Service
            Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
            Condition:
              ArnEquals:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      KeyRotationStatus: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: LogGuardian

  LogGuardianKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Ref KMSKeyAlias
      TargetKeyId: !Ref LogGuardianKMSKey

  # IAM Role for Lambda Execution
  LogGuardianLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LogGuardian-LambdaRole-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LogGuardianStackSetPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - config:GetComplianceDetailsByConfigRule
                  - config:GetComplianceDetailsByResource
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:AssociateKmsKey
                  - logs:PutRetentionPolicy
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !GetAtt LogGuardianKMSKey.Arn
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Condition:
                  StringEquals:
                    "cloudwatch:namespace": "LogGuardian"
              # Cross-account S3 access for Lambda code
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${DeploymentBucket}/${LambdaCodeKey}"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: LogGuardian

  # Lambda Function
  LogGuardianLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "logguardian-${Environment}"
      Runtime: provided.al2023
      Handler: main
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref LambdaCodeKey
      Role: !GetAtt LogGuardianLambdaRole.Arn
      MemorySize: 256
      Timeout: 900
      Environment:
        Variables:
          KMS_KEY_ALIAS: !Ref KMSKeyAlias
          DEFAULT_RETENTION_DAYS: !Ref DefaultRetentionDays
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: INFO
          ACCOUNT_ID: !Ref "AWS::AccountId"
          REGION: !Ref "AWS::Region"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: LogGuardian

  # Config Rules
  CloudWatchLogGroupEncryptedRule:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub "logguardian-encryption-${Environment}"
      Description: "Checks if CloudWatch log groups are encrypted with KMS"
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDWATCH_LOG_GROUP_ENCRYPTED
      Scope:
        ComplianceResourceTypes:
          - AWS::Logs::LogGroup

  CloudWatchLogGroupRetentionRule:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub "logguardian-retention-${Environment}"
      Description: "Checks if CloudWatch log groups have retention policy set"
      Source:
        Owner: AWS
        SourceIdentifier: CW_LOGGROUP_RETENTION_PERIOD_CHECK
      InputParameters: !Sub |
        {
          "MinRetentionTime": "${DefaultRetentionDays}"
        }
      Scope:
        ComplianceResourceTypes:
          - AWS::Logs::LogGroup

  # EventBridge Rule
  LogGuardianScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "logguardian-schedule-${Environment}"
      Description: "Scheduled trigger for LogGuardian compliance checks"
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogGuardianLambda.Arn
          Id: "LogGuardianTarget"
          Input: !Sub |
            {
              "source": "eventbridge.schedule",
              "region": "${AWS::Region}",
              "account": "${AWS::AccountId}",
              "environment": "${Environment}"
            }

  # Permission for EventBridge to invoke Lambda
  LogGuardianLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LogGuardianLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LogGuardianScheduleRule.Arn

  # CloudWatch Log Group for Lambda Logs
  LogGuardianLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/logguardian-${Environment}"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LogGuardianKMSKey.Arn

Outputs:
  AccountId:
    Description: AWS Account ID where LogGuardian is deployed
    Value: !Ref "AWS::AccountId"
    
  LambdaFunctionArn:
    Description: ARN of the LogGuardian Lambda function
    Value: !GetAtt LogGuardianLambda.Arn
    
  KMSKeyArn:
    Description: ARN of the KMS key for log group encryption
    Value: !GetAtt LogGuardianKMSKey.Arn
    
  EventBridgeRuleArn:
    Description: ARN of the EventBridge rule for scheduled execution
    Value: !GetAtt LogGuardianScheduleRule.Arn
