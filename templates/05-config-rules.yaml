AWSTemplateFormatVersion: '2010-09-09'
Description: 'LogGuardian - AWS Config Rules for CloudWatch Log Group Compliance'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
    
  DefaultRetentionDays:
    Type: Number
    Default: 365
    Description: Minimum retention period for log groups in days

  ConfigServiceRoleArn:
    Type: String
    Default: ""
    Description: ARN of the Config service role (optional - will use default naming if not provided)

Conditions:
  UseProvidedRole: !Not [!Equals [!Ref ConfigServiceRoleArn, ""]]

Resources:
  # Config Rule for Log Group Encryption
  CloudWatchLogGroupEncryptedRule:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub "logguardian-encryption-${Environment}"
      Description: "Checks if CloudWatch log groups are encrypted with KMS"
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDWATCH_LOG_GROUP_ENCRYPTED
      Scope:
        ComplianceResourceTypes:
          - "AWS::Logs::LogGroup"

  # Config Rule for Log Group Retention
  CloudWatchLogGroupRetentionRule:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub "logguardian-retention-${Environment}"
      Description: "Checks if CloudWatch log groups have adequate retention policy"
      Source:
        Owner: AWS
        SourceIdentifier: CW_LOGGROUP_RETENTION_PERIOD_CHECK
      InputParameters: !Sub |
        {
          "MinRetentionTime": "${DefaultRetentionDays}"
        }
      Scope:
        ComplianceResourceTypes:
          - "AWS::Logs::LogGroup"

  # Config Configuration Recorder (if not already exists)
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: !Sub "logguardian-recorder-${Environment}"
      RoleARN: !If
        - UseProvidedRole
        - !Ref ConfigServiceRoleArn
        - !Sub "arn:aws:iam::${AWS::AccountId}:role/LogGuardian-ConfigRole-${Environment}"
      RecordingGroup:
        AllSupportedResourceTypes: false
        ResourceTypes:
          - "AWS::Logs::LogGroup"
        IncludeGlobalResourceTypes: false

  # Config Delivery Channel (simplified for log groups only)
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      Name: !Sub "logguardian-delivery-${Environment}"
      S3BucketName: !Ref ConfigBucket
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Daily

  # S3 Bucket for Config (simplified)
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "logguardian-config-${AWS::AccountId}-${AWS::Region}-${Environment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter90Days
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: LogGuardian

  # Bucket Policy for Config Service
  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt ConfigBucket.Arn
            Condition:
              StringEquals:
                'AWS:SourceAccount': !Ref 'AWS::AccountId'
          - Sid: AWSConfigBucketExistenceCheck
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:ListBucket
            Resource: !GetAtt ConfigBucket.Arn
            Condition:
              StringEquals:
                'AWS:SourceAccount': !Ref 'AWS::AccountId'
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "${ConfigBucket.Arn}/*"
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
                'AWS:SourceAccount': !Ref 'AWS::AccountId'

Outputs:
  EncryptionRuleArn:
    Description: ARN of the log group encryption Config rule
    Value: !GetAtt CloudWatchLogGroupEncryptedRule.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EncryptionRuleArn"
      
  RetentionRuleArn:
    Description: ARN of the log group retention Config rule
    Value: !GetAtt CloudWatchLogGroupRetentionRule.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RetentionRuleArn"
      
  ConfigBucketName:
    Description: Name of the Config S3 bucket
    Value: !Ref ConfigBucket
    Export:
      Name: !Sub "${AWS::StackName}-ConfigBucketName"
