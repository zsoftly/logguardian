AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: LogGuardian - Automated CloudWatch Log Groups Compliance (Single Region,
  Optional Infrastructure)
Metadata:
  AWS::ServerlessRepo::Application:
    Name: LogGuardian
    Description: Enterprise-grade automation for CloudWatch log group encryption,
      retention, and compliance monitoring
    Author: ZSoftly Technologies Inc
    SpdxLicenseId: MIT
    LicenseUrl: s3://aws-sam-cli-managed-default-samclisourcebucket-oxpepeo8ipdm/c65ff0cf9a9b0fc7ecb08d286790ddf2
    ReadmeUrl: s3://aws-sam-cli-managed-default-samclisourcebucket-oxpepeo8ipdm/b0d3124f54ac776fa1b770aeac9f278b
    Labels:
    - cloudwatch
    - compliance
    - security
    - kms
    - logs
    HomePageUrl: https://github.com/zsoftly/logguardian
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/zsoftly/logguardian
Parameters:
  Environment:
    Type: String
    Description: Deployment environment (e.g., dev, staging, prod, test)
  CreateKMSKey:
    Type: String
    Description: Create new KMS key or use existing one
    AllowedValues:
    - 'true'
    - 'false'
  ExistingKMSKeyArn:
    Type: String
    Default: ''
    Description: ARN of existing KMS key (required if CreateKMSKey=false)
  KMSKeyAlias:
    Type: String
    Description: KMS key alias for new key or reference to existing key
    AllowedPattern: ^alias/[a-zA-Z0-9:/_-]+$
  CreateConfigService:
    Type: String
    Description: Create Config service resources (recorder, delivery channel, bucket)
    AllowedValues:
    - 'true'
    - 'false'
  ExistingConfigBucket:
    Type: String
    Default: ''
    Description: Name of existing S3 bucket for Config (required if CreateConfigService=false)
  ExistingConfigServiceRoleArn:
    Type: String
    Default: ''
    Description: ARN of existing Config service role (required if CreateConfigService=false)
  CreateConfigRules:
    Type: String
    Description: Create new Config rules or use existing ones
    AllowedValues:
    - 'true'
    - 'false'
  ExistingEncryptionConfigRule:
    Type: String
    Default: ''
    Description: Name of existing encryption Config rule (required if CreateConfigRules=false)
  ExistingRetentionConfigRule:
    Type: String
    Default: ''
    Description: Name of existing retention Config rule (required if CreateConfigRules=false)
  CreateEventBridgeRules:
    Type: String
    Description: Create EventBridge scheduling rules (disable for manual invocation)
    AllowedValues:
    - 'true'
    - 'false'
  EncryptionScheduleExpression:
    Type: String
    Description: Schedule for encryption compliance checks (e.g., cron(0 2 ? * * *)
      for daily at 2 AM)
    AllowedPattern: ^(rate\(.*\)|cron\(.*\))$
  RetentionScheduleExpression:
    Type: String
    Description: Schedule for retention compliance checks (e.g., cron(0 3 ? * * *)
      for daily at 3 AM)
    AllowedPattern: ^(rate\(.*\)|cron\(.*\))$
  DefaultRetentionDays:
    Type: Number
    MinValue: 1
    MaxValue: 3653
    Description: Default retention period for log groups in days
  LambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 3008
    Description: Memory allocation for Lambda function (MB)
  LambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Description: Lambda function timeout in seconds
  S3ExpirationDays:
    Type: Number
    MinValue: 1
    MaxValue: 3653
    Description: Days after which Config data is permanently deleted (only applies
      to new buckets)
  EnableS3LifecycleRules:
    Type: String
    Description: Enable S3 lifecycle rules for cost optimization (only applies to
      new buckets)
    AllowedValues:
    - 'true'
    - 'false'
  CreateMonitoringDashboard:
    Type: String
    Description: Create CloudWatch dashboard for monitoring
    AllowedValues:
    - 'true'
    - 'false'
  ProductName:
    Type: String
    Description: Product name for resource tagging
  Owner:
    Type: String
    Description: Owner/Team responsible for this deployment
  CustomerTagPrefix:
    Type: String
    Default: ''
    Description: Customer-specific tag prefix (optional)
  ManagedBy:
    Type: String
    Description: How this stack is managed (e.g., SAM, CloudFormation, Terraform)
Conditions:
  ShouldCreateKMSKey:
    Fn::Equals:
    - Ref: CreateKMSKey
    - 'true'
  ShouldCreateConfigService:
    Fn::Equals:
    - Ref: CreateConfigService
    - 'true'
  ShouldCreateConfigRules:
    Fn::Equals:
    - Ref: CreateConfigRules
    - 'true'
  ShouldCreateEventBridgeRules:
    Fn::Equals:
    - Ref: CreateEventBridgeRules
    - 'true'
  IsS3LifecycleEnabled:
    Fn::And:
    - Condition: ShouldCreateConfigService
    - Fn::Equals:
      - Ref: EnableS3LifecycleRules
      - 'true'
  CreateDashboard:
    Fn::Equals:
    - Ref: CreateMonitoringDashboard
    - 'true'
  HasCustomerTagPrefix:
    Fn::Not:
    - Fn::Equals:
      - Ref: CustomerTagPrefix
      - ''
Globals:
  Function:
    Runtime: provided.al2023
    Architectures:
    - x86_64
    Timeout:
      Ref: LambdaTimeout
    MemorySize:
      Ref: LambdaMemorySize
    Environment:
      Variables:
        KMS_KEY_ARN:
          Fn::If:
          - ShouldCreateKMSKey
          - Fn::GetAtt:
            - LogGuardianKMSKey
            - Arn
          - Ref: ExistingKMSKeyArn
        KMS_KEY_ALIAS:
          Ref: KMSKeyAlias
        DEFAULT_RETENTION_DAYS:
          Ref: DefaultRetentionDays
        ENVIRONMENT:
          Ref: Environment
        LOG_LEVEL: INFO
        DRY_RUN: 'false'
        BATCH_LIMIT: '100'
        ENCRYPTION_CONFIG_RULE:
          Fn::If:
          - ShouldCreateConfigRules
          - Ref: EncryptionConfigRule
          - Ref: ExistingEncryptionConfigRule
        RETENTION_CONFIG_RULE:
          Fn::If:
          - ShouldCreateConfigRules
          - Ref: RetentionConfigRule
          - Ref: ExistingRetentionConfigRule
    Tags:
      Product:
        Fn::If:
        - HasCustomerTagPrefix
        - Ref: CustomerTagPrefix
        - Ref: ProductName
      Owner:
        Ref: Owner
      Environment:
        Ref: Environment
      ManagedBy:
        Ref: ManagedBy
      Application: LogGuardian
      CreatedBy: SAM-Template
Resources:
  LogGuardianKMSKey:
    Type: AWS::KMS::Key
    Condition: ShouldCreateKMSKey
    Properties:
      Description:
        Fn::Sub:
        - ${TagPrefix} KMS key for ${Environment} environment
        - TagPrefix:
            Fn::If:
            - HasCustomerTagPrefix
            - Ref: CustomerTagPrefix
            - Ref: ProductName
      KeyPolicy:
        Statement:
        - Sid: Enable root permissions
          Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: '*'
        - Sid: Allow CloudWatch Logs
          Effect: Allow
          Principal:
            Service:
              Fn::Sub: logs.${AWS::Region}.amazonaws.com
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: '*'
          Condition:
            ArnEquals:
              kms:EncryptionContext:aws:logs:arn:
                Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
      EnableKeyRotation: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub:
          - ${TagPrefix}-logs-${Environment}
          - TagPrefix:
              Fn::If:
              - HasCustomerTagPrefix
              - Ref: CustomerTagPrefix
              - Ref: ProductName
    Metadata:
      SamResourceId: LogGuardianKMSKey
  LogGuardianKMSKeyAlias:
    Type: AWS::KMS::Alias
    Condition: ShouldCreateKMSKey
    Properties:
      AliasName:
        Ref: KMSKeyAlias
      TargetKeyId:
        Ref: LogGuardianKMSKey
    Metadata:
      SamResourceId: LogGuardianKMSKeyAlias
  LogGuardianFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/logguardian-compliance-${Environment}
      RetentionInDays:
        Ref: DefaultRetentionDays
      KmsKeyId:
        Fn::If:
        - ShouldCreateKMSKey
        - Fn::GetAtt:
          - LogGuardianKMSKey
          - Arn
        - Ref: ExistingKMSKeyArn
      Tags:
      - Key: Purpose
        Value: Lambda function logs for LogGuardian compliance automation
      - Key: Product
        Value:
          Fn::If:
          - HasCustomerTagPrefix
          - Ref: CustomerTagPrefix
          - Ref: ProductName
    Metadata:
      SamResourceId: LogGuardianFunctionLogGroup
  LogGuardianFunction:
    Type: AWS::Serverless::Function
    DependsOn: LogGuardianFunctionLogGroup
    Properties:
      FunctionName:
        Fn::Sub: logguardian-compliance-${Environment}
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-oxpepeo8ipdm/0865260a163d40c6e9e51273d4b47caf
      Handler: bootstrap
      Description: LogGuardian compliance automation for CloudWatch log groups
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - config:GetComplianceDetailsByConfigRule
          - config:GetComplianceDetailsByResource
          - config:DescribeConfigRules
          - config:DescribeComplianceByConfigRule
          Resource: '*'
        - Effect: Allow
          Action:
          - logs:AssociateKmsKey
          - logs:PutRetentionPolicy
          - logs:DescribeLogGroups
          Resource: '*'
        - Effect: Allow
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          - kms:GetKeyPolicy
          - kms:ListAliases
          Resource:
          - Fn::If:
            - ShouldCreateKMSKey
            - Fn::GetAtt:
              - LogGuardianKMSKey
              - Arn
            - Ref: ExistingKMSKeyArn
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource: '*'
          Condition:
            StringEquals:
              cloudwatch:namespace: LogGuardian
    Metadata:
      SamResourceId: LogGuardianFunction
  EncryptionScheduleRule:
    Type: AWS::Events::Rule
    Condition: ShouldCreateEventBridgeRules
    Properties:
      Name:
        Fn::Sub: logguardian-encryption-schedule-${Environment}
      Description: Scheduled trigger for LogGuardian encryption compliance checks
      ScheduleExpression:
        Ref: EncryptionScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - LogGuardianFunction
          - Arn
        Id: LogGuardianEncryptionTarget
        Input:
          Fn::Sub: "{\n  \"type\": \"config-rule-evaluation\",\n  \"configRuleName\"\
            : \"${!If [ShouldCreateConfigRules, !Ref EncryptionConfigRule, !Ref ExistingEncryptionConfigRule]}\"\
            ,\n  \"region\": \"${AWS::Region}\",\n  \"account\": \"${AWS::AccountId}\"\
            ,\n  \"environment\": \"${Environment}\",\n  \"batchSize\": 20\n}\n"
    Metadata:
      SamResourceId: EncryptionScheduleRule
  RetentionScheduleRule:
    Type: AWS::Events::Rule
    Condition: ShouldCreateEventBridgeRules
    Properties:
      Name:
        Fn::Sub: logguardian-retention-schedule-${Environment}
      Description: Scheduled trigger for LogGuardian retention compliance checks
      ScheduleExpression:
        Ref: RetentionScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - LogGuardianFunction
          - Arn
        Id: LogGuardianRetentionTarget
        Input:
          Fn::Sub: "{\n  \"type\": \"config-rule-evaluation\",\n  \"configRuleName\"\
            : \"${!If [ShouldCreateConfigRules, !Ref RetentionConfigRule, !Ref ExistingRetentionConfigRule]}\"\
            ,\n  \"region\": \"${AWS::Region}\",\n  \"account\": \"${AWS::AccountId}\"\
            ,\n  \"environment\": \"${Environment}\",\n  \"batchSize\": 20\n}\n"
    Metadata:
      SamResourceId: RetentionScheduleRule
  LambdaInvokePermissionEncryption:
    Type: AWS::Lambda::Permission
    Condition: ShouldCreateEventBridgeRules
    Properties:
      FunctionName:
        Ref: LogGuardianFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - EncryptionScheduleRule
        - Arn
    Metadata:
      SamResourceId: LambdaInvokePermissionEncryption
  LambdaInvokePermissionRetention:
    Type: AWS::Lambda::Permission
    Condition: ShouldCreateEventBridgeRules
    Properties:
      FunctionName:
        Ref: LogGuardianFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - RetentionScheduleRule
        - Arn
    Metadata:
      SamResourceId: LambdaInvokePermissionRetention
  ConfigServiceRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreateConfigService
    Properties:
      RoleName:
        Fn::Sub: LogGuardian-ConfigRole-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWS_ConfigRole
      Tags:
      - Key: Product
        Value:
          Fn::If:
          - HasCustomerTagPrefix
          - Ref: CustomerTagPrefix
          - Ref: ProductName
      - Key: Purpose
        Value: Config service role for LogGuardian
    Metadata:
      SamResourceId: ConfigServiceRole
  ConfigBucket:
    Type: AWS::S3::Bucket
    Condition: ShouldCreateConfigService
    Properties:
      BucketName:
        Fn::Sub:
        - logguardian-config-${Environment}-${AWS::AccountId}-${AWS::Region}
        - {}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Fn::If:
        - IsS3LifecycleEnabled
        - Rules:
          - Id: ConfigDataExpiration
            Status: Enabled
            ExpirationInDays:
              Ref: S3ExpirationDays
            NoncurrentVersionExpirationInDays: 7
        - Ref: AWS::NoValue
      VersioningConfiguration:
        Status:
          Fn::If:
          - IsS3LifecycleEnabled
          - Enabled
          - Suspended
      Tags:
      - Key: Product
        Value:
          Fn::If:
          - HasCustomerTagPrefix
          - Ref: CustomerTagPrefix
          - Ref: ProductName
      - Key: Purpose
        Value: Config delivery channel storage for LogGuardian
    Metadata:
      SamResourceId: ConfigBucket
  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: ShouldCreateConfigService
    Properties:
      Bucket:
        Ref: ConfigBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: s3:GetBucketAcl
          Resource:
            Fn::GetAtt:
            - ConfigBucket
            - Arn
          Condition:
            StringEquals:
              AWS:SourceAccount:
                Ref: AWS::AccountId
        - Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: s3:ListBucket
          Resource:
            Fn::GetAtt:
            - ConfigBucket
            - Arn
          Condition:
            StringEquals:
              AWS:SourceAccount:
                Ref: AWS::AccountId
        - Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: s3:PutObject
          Resource:
            Fn::Sub: ${ConfigBucket.Arn}/*
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control
              AWS:SourceAccount:
                Ref: AWS::AccountId
    Metadata:
      SamResourceId: ConfigBucketPolicy
  ConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Condition: ShouldCreateConfigService
    Properties:
      Name:
        Fn::Sub: LogGuardian-Recorder-${Environment}
      RoleARN:
        Fn::GetAtt:
        - ConfigServiceRole
        - Arn
      RecordingGroup:
        AllSupported: false
        IncludeGlobalResourceTypes: false
        ResourceTypes:
        - AWS::Logs::LogGroup
    Metadata:
      SamResourceId: ConfigurationRecorder
  DeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Condition: ShouldCreateConfigService
    Properties:
      Name:
        Fn::Sub: LogGuardian-DeliveryChannel-${Environment}
      S3BucketName:
        Ref: ConfigBucket
    Metadata:
      SamResourceId: DeliveryChannel
  EncryptionConfigRule:
    Type: AWS::Config::ConfigRule
    Condition: ShouldCreateConfigRules
    Properties:
      ConfigRuleName:
        Fn::Sub:
        - ${TagPrefix}-encryption-${Environment}
        - TagPrefix:
            Fn::If:
            - HasCustomerTagPrefix
            - Ref: CustomerTagPrefix
            - logguardian
      Description: Checks if CloudWatch log groups are encrypted with KMS
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDWATCH_LOG_GROUP_ENCRYPTED
      Scope:
        ComplianceResourceTypes:
        - AWS::Logs::LogGroup
      MaximumExecutionFrequency: TwentyFour_Hours
    Metadata:
      SamResourceId: EncryptionConfigRule
  RetentionConfigRule:
    Type: AWS::Config::ConfigRule
    Condition: ShouldCreateConfigRules
    Properties:
      ConfigRuleName:
        Fn::Sub:
        - ${TagPrefix}-retention-${Environment}
        - TagPrefix:
            Fn::If:
            - HasCustomerTagPrefix
            - Ref: CustomerTagPrefix
            - logguardian
      Description:
        Fn::Sub: Checks if CloudWatch log groups have retention policy set to at least
          ${DefaultRetentionDays} days
      Source:
        Owner: AWS
        SourceIdentifier: CW_LOGGROUP_RETENTION_PERIOD_CHECK
      InputParameters:
        Fn::Sub: "{\n  \"MinRetentionTime\": \"${DefaultRetentionDays}\"\n}\n"
      Scope:
        ComplianceResourceTypes:
        - AWS::Logs::LogGroup
      MaximumExecutionFrequency: TwentyFour_Hours
    Metadata:
      SamResourceId: RetentionConfigRule
  ComplianceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateDashboard
    Properties:
      DashboardName:
        Fn::Sub:
        - ${TagPrefix}-${Environment}
        - TagPrefix:
            Fn::If:
            - HasCustomerTagPrefix
            - Ref: CustomerTagPrefix
            - LogGuardian
      DashboardBody:
        Fn::Sub: "{\n  \"widgets\": [\n    {\n      \"type\": \"metric\",\n      \"\
          x\": 0,\n      \"y\": 0,\n      \"width\": 12,\n      \"height\": 6,\n \
          \     \"properties\": {\n        \"metrics\": [\n          [ \"AWS/Lambda\"\
          , \"Duration\", \"FunctionName\", \"${LogGuardianFunction}\" ],\n      \
          \    [ \".\", \"Errors\", \".\", \".\" ],\n          [ \".\", \"Invocations\"\
          , \".\", \".\" ]\n        ],\n        \"period\": 300,\n        \"stat\"\
          : \"Average\",\n        \"region\": \"${AWS::Region}\",\n        \"title\"\
          : \"Lambda Function Metrics\"\n      }\n    },\n    {\n      \"type\": \"\
          metric\",\n      \"x\": 12,\n      \"y\": 0,\n      \"width\": 12,\n   \
          \   \"height\": 6,\n      \"properties\": {\n        \"metrics\": [\n  \
          \        [ \"LogGuardian\", \"LogGroupsProcessed\", \"Environment\", \"\
          ${Environment}\" ],\n          [ \".\", \"LogGroupsRemediated\", \".\",\
          \ \".\" ],\n          [ \".\", \"RemediationErrors\", \".\", \".\" ]\n \
          \       ],\n        \"period\": 300,\n        \"stat\": \"Sum\",\n     \
          \   \"region\": \"${AWS::Region}\",\n        \"title\": \"Compliance Metrics\"\
          \n      }\n    }\n  ]\n}\n"
    Metadata:
      SamResourceId: ComplianceDashboard
Outputs:
  LogGuardianFunctionArn:
    Description: ARN of the LogGuardian Lambda function
    Value:
      Fn::GetAtt:
      - LogGuardianFunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FunctionArn
  KMSKeyArn:
    Description: ARN of the KMS key used for log group encryption
    Value:
      Fn::If:
      - ShouldCreateKMSKey
      - Fn::GetAtt:
        - LogGuardianKMSKey
        - Arn
      - Ref: ExistingKMSKeyArn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-KMSKeyArn
  KMSKeyAlias:
    Description: Alias of the KMS key used for log group encryption
    Value:
      Ref: KMSKeyAlias
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-KMSKeyAlias
  ConfigBucketName:
    Description: Name of the S3 bucket storing AWS Config data
    Value:
      Fn::If:
      - ShouldCreateConfigService
      - Ref: ConfigBucket
      - Ref: ExistingConfigBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ConfigBucket
  EncryptionConfigRuleName:
    Description: Name of the Config rule for encryption compliance
    Value:
      Fn::If:
      - ShouldCreateConfigRules
      - Ref: EncryptionConfigRule
      - Ref: ExistingEncryptionConfigRule
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EncryptionRule
  RetentionConfigRuleName:
    Description: Name of the Config rule for retention compliance
    Value:
      Fn::If:
      - ShouldCreateConfigRules
      - Ref: RetentionConfigRule
      - Ref: ExistingRetentionConfigRule
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RetentionRule
  DashboardURL:
    Condition: CreateDashboard
    Description: URL to the CloudWatch dashboard
    Value:
      Fn::Sub:
      - https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}
      - DashboardName:
          Fn::If:
          - HasCustomerTagPrefix
          - Fn::Sub: ${CustomerTagPrefix}-${Environment}
          - Fn::Sub: LogGuardian-${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DashboardURL
  DeploymentSummary:
    Description: Summary of what was created vs what was reused
    Value:
      Fn::Sub:
      - 'KMS Key: ${KMSStatus}

        Config Service: ${ConfigStatus}

        Config Rules: ${RulesStatus}

        EventBridge: ${EventsStatus}

        Dashboard: ${DashboardStatus}

        '
      - KMSStatus:
          Fn::If:
          - ShouldCreateKMSKey
          - Created
          - Using Existing
        ConfigStatus:
          Fn::If:
          - ShouldCreateConfigService
          - Created
          - Using Existing
        RulesStatus:
          Fn::If:
          - ShouldCreateConfigRules
          - Created
          - Using Existing
        EventsStatus:
          Fn::If:
          - ShouldCreateEventBridgeRules
          - Created
          - Disabled
        DashboardStatus:
          Fn::If:
          - CreateDashboard
          - Created
          - Disabled
  ManualInvocationCommand:
    Description: AWS CLI command to manually invoke the Lambda function
    Value:
      Fn::Sub: "aws lambda invoke --function-name ${LogGuardianFunction} --payload\
        \ '{\n  \"type\": \"config-rule-evaluation\",\n  \"configRuleName\": \"${!If\
        \ [ShouldCreateConfigRules, !Ref EncryptionConfigRule, !Ref ExistingEncryptionConfigRule]}\"\
        ,\n  \"region\": \"${AWS::Region}\",\n  \"account\": \"${AWS::AccountId}\"\
        ,\n  \"environment\": \"${Environment}\",\n  \"batchSize\": 20\n}' response.json\
        \ --region ${AWS::Region}\n"
