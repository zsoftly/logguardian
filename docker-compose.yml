version: '3.8'

services:
  # Main LogGuardian container service
  logguardian:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-1.3.0}
    image: logguardian:${VERSION:-latest}
    container_name: logguardian-container
    environment:
      # AWS Configuration
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_PROFILE: ${AWS_PROFILE:-default}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      
      # Application Configuration
      CONFIG_RULE_NAME: ${CONFIG_RULE_NAME:-cloudwatch-log-group-encrypted}
      BATCH_SIZE: ${BATCH_SIZE:-10}
      DRY_RUN: ${DRY_RUN:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      # Mount AWS credentials (read-only)
      - ~/.aws:/home/logguardian/.aws:ro
    command: [
      "--config-rule", "${CONFIG_RULE_NAME:-cloudwatch-log-group-encrypted}",
      "--region", "${AWS_REGION:-us-east-1}",
      "--batch-size", "${BATCH_SIZE:-10}",
      "--dry-run",
      "--verbose",
      "--output", "json"
    ]
    networks:
      - logguardian-net
    # Container exits after execution
    restart: "no"

  # Development container with shell access
  logguardian-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    image: logguardian:dev
    container_name: logguardian-dev
    environment:
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_PROFILE: ${AWS_PROFILE:-default}
    volumes:
      - ~/.aws:/root/.aws:ro
      - .:/workspace
    working_dir: /workspace
    command: /bin/sh
    networks:
      - logguardian-net
    stdin_open: true
    tty: true

  # Test runner container
  logguardian-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    image: logguardian:test
    container_name: logguardian-test
    volumes:
      - .:/workspace
    working_dir: /workspace
    command: go test -v ./...
    networks:
      - logguardian-net

networks:
  logguardian-net:
    driver: bridge

# Usage examples:
# 
# 1. Run in dry-run mode (default):
#    docker-compose up logguardian
#
# 2. Run with specific config rule:
#    CONFIG_RULE_NAME=my-rule docker-compose up logguardian
#
# 3. Run in apply mode (actual remediation):
#    DRY_RUN=false docker-compose up logguardian
#
# 4. Run tests:
#    docker-compose up logguardian-test
#
# 5. Access development shell:
#    docker-compose run logguardian-dev
#
# 6. Build all images:
#    docker-compose build
#
# 7. Clean up:
#    docker-compose down -v --rmi all